"""
name: location
description: "Plugin that gives information about user's location"
priority: 250
"""
import json
import requests

import leonard
from leonard.utils import location

FOURSQUARE_SEARCH_API = ('https://api.foursquare.com/v2/venues/explore?'
                         'client_id={}&client_secret={}&ll={}'
                         '&locale={}&v=20160301')


def get_near_places(coordinates, language_code, bot, query=None):
    params = {}
    if query:
        params['query'] = query
    response = requests.get(FOURSQUARE_SEARCH_API.format(
        bot.config.get('LEONARD_FOURSQUARE_CLIENT_ID'),
        bot.config.get('LEONARD_FOURSQUARE_CLIENT_SECRET'),
        ','.join([str(coordinates[0]), str(coordinates[1])]),
        language_code
    ), params=params)
    near_places_data = json.loads(response.text)
    places = []
    for place in near_places_data['response']['groups'][0]['items']:
        categories = []
        for category in place['venue']['categories']:
            categories.append(category['name'])
        reasons = []
        for reason in place['reasons']['items']:
            reasons.append(reason['summary'])
        places.append({'name': place['venue']['name'],
                       'categories': categories,
                       'reasons': reasons,
                       'distance': place['venue']['location']['distance'],
                       'location': (place['venue']['location']['lat'],
                                    place['venue']['location']['lng']),
                       'rating': place['venue'].get('rating', None),
                       'link': 'https://foursquare.com/v/{}'.format(
                           place['venue']['id'])})
    return places


def send_place_detail(place, message, bot):
    place_answer = leonard.OutgoingMessage(
        recipient=message.sender,
        text=message.locale.detail_place.format(
            name=place['name'],
            categories=', '.join(place['categories']),
            distance=place['distance'],
            reasons='\n'.join(place['reasons']),
            link=place['link']
        )
    )
    bot.send_message(place_answer)
    location_attachment = leonard.Attachment('location',
                                             lat=place['location'][0],
                                             lng=place['location'][1])
    location_answer = leonard.OutgoingMessage(
        recipient=message.sender,
        attachments=[location_attachment]
    )
    bot.send_message(location_answer)
    need_more_answer = leonard.OutgoingMessage(
        recipient=message.sender,
        text=message.locale.need_more,
        buttons=[[message.locale.more], [message.locale.exit]]
    )
    bot.ask_question(need_more_answer, more_places_callback, 'location')


@leonard.hooks.callback(lambda message, bot: message.location is not None)
def location_message(message, bot):
    message.sender.update_location_data(message.location)
    places = get_near_places(message.location, message.sender.data['language'],
                             bot)
    places_text = ''
    for place in places[:5]:
        places_text += message.locale.place.format(
            place['name'], ', '.join(place['categories']), place['distance']
        )
    answer = leonard.OutgoingMessage(
        recipient=message.sender,
        text=message.locale.location_text.format(places_text),
        attachments=[]
    )
    bot.send_message(answer)


@leonard.hooks.ross(type='places', subtype='explore')
def explore_message(message, bot):
    query = message.variables['ross']['query']
    if not query:
        answer = leonard.OutgoingMessage(
            recipient=message.sender,
            text=message.locale.choose_location(bot),
            buttons=[[message.locale.default]]
        )
        bot.ask_question(answer, explore_choose_location_callback, 'location')
        return


def explore_choose_location_callback(message, bot):
    if not (message.location or message.text == message.locale.default):
        answer = leonard.OutgoingMessage(
            recipient=message.sender,
            text=message.locale.choose_location(bot),
            buttons=[[message.locale.default]]
        )
        bot.ask_question(answer, explore_choose_location_callback, 'location')
        return
    if message.location:
        message.sender.update_location_data(message.location)
    answer = leonard.OutgoingMessage(
        recipient=message.sender,
        text=message.locale.choose_type(bot)
    )
    bot.ask_question(answer, explore_choose_type_callback, 'location')


def explore_choose_type_callback(message, bot):
    query = message.uncleaned_text
    if not query:
        answer = leonard.OutgoingMessage(
            recipient=message.sender,
            text=message.locale.choose_type(bot)
        )
        bot.ask_question(answer, explore_choose_type_callback, 'location')
        return
    places = get_near_places(
        message.sender.data['location'], message.sender.data['language'],
        bot, query
    )
    if not places:
        answer = leonard.OutgoingMessage(
            recipient=message.sender,
            text=message.locale.not_found
        )
        bot.send_message(answer)
        return
    message.sender.data['recommended_places'] = list(reversed(places))
    first_place = message.sender.data['recommended_places'].pop()
    message.sender.update()
    send_place_detail(first_place, message, bot)


def more_places_callback(message, bot):
    if message.text != message.locale.more:
        answer = leonard.OutgoingMessage(
            recipient=message.sender,
            text=message.locale.need_more,
            buttons=[[message.locale.more], [message.locale.exit]]
        )
        bot.ask_question(answer, more_places_callback, 'location')
        return
    if not message.sender.data['recommended_places']:
        answer = leonard.OutgoingMessage(
            recipient=message.sender,
            text=message.locale.thats_all
        )
        bot.send_message(answer)
        return
    place = message.sender.data['recommended_places'].pop()
    message.sender.update()
    send_place_detail(place, message, bot)


class EnglishLocale:
    language_code = 'en'
    location_text = ("Places around there:\n\n{}\n"
                     "Send 'where i can go' if you want to get more "
                     "information about places")
    place = '"{}" ({}) - {} meters\n'
    detail_place = ("¬´{name}¬ª - {categories}\n\nDistance: {distance} meters\n"
                    "\nReasons:\n{reasons}\n\nFoursquare: {link}\n\n")
    default = 'default'
    more = 'more'
    need_more = ("You can get more places by sending 'more' or "
                 "exit using 'thanks'")
    not_found = "I didn't found anything üò¨"
    thats_all = "That's all I can found üò¨"
    exit = 'thanks'

    def choose_location(self, bot):
        text = ("Where are you?\n\nSend me your location, "
                "or answer 'default' if you have already sent it.\n\n" +
                bot.get_locale('utils', self.language_code).question_explanation)
        return text

    def choose_type(self, bot):
        text = ("Where do you want to go? ü§î\n\nFor example, 'to drink', "
                "'cheap place', 'restourant', 'for date'\n\n" +
                bot.get_locale('utils', self.language_code).question_explanation)
        return text


class RussianLocale:
    language_code = 'ru'
    location_text = ("–ú–µ—Å—Ç–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏:\n\n{}\n"
                     "–û—Ç–ø—Ä–∞–≤—å '–∫—É–¥–∞ –º–Ω–µ —Å—Ö–æ–¥–∏—Ç—å', –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ "
                     "—Å–µ–±–µ –ø–æ –¥—É—à–µ.")
    place = '"{}" ({}) - {} –º\n'
    default = '–æ–±—ã—á–Ω–æ–µ'
    detail_place = ("¬´{name}¬ª - {categories}\n\n–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance} –º\n"
                    "\n–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n{reasons}\n\nFoursquare: {link}\n\n")
    more = '–±–æ–ª—å—à–µ'
    need_more = ("–¢—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–∏–≤ '–±–æ–ª—å—à–µ' "
                 "–∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ '–≤—Å–µ'")
    not_found = '–Ø –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª üò¨'
    thats_all = "–≠—Ç–æ –≤—Å–µ, —á—Ç–æ —è —Å–º–æ–≥ –Ω–∞–π—Ç–∏ üò¨"
    exit = '–≤—Å—ë'

    def choose_location(self, bot):
        text = ("–ì–¥–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è?\n\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ "
                "–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å '–æ–±—ã—á–Ω–æ–µ', –µ—Å–ª–∏ —Ç—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –º–Ω–µ –µ–≥–æ\n\n" +
                bot.get_locale('utils', self.language_code).question_explanation)
        return text

    def choose_type(self, bot):
        text = ("–ö—É–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–π—Ç–∏? ü§î\n\n–ù–∞–ø—Ä–∏–º–µ—Ä, '–≤—ã–ø–∏—Ç—å', "
                "'–¥–µ—à–µ–≤–æ–µ –º–µ—Å—Ç–æ', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ'\n\n" +
                bot.get_locale('utils', self.language_code).question_explanation)
        return text
